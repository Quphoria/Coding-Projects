from wieners_attack_rsa import wieners_attack_d
# The key generation algorithm boils down to:
#
# choose two distinct prime numbers p and q. (Look up how this is actually done, it's interesting and has caused security flaws in the past).
# compute n = p*q. The length of n (in bits) is going to be the key length.
# compute φ = (p − 1)*(q − 1).
# choose e, typically 3 or 65537.
# compute d ≡ e^-1 mod φ (also look up how this is done).
# public key is the pair (n, e)
# private key is the pair (n, d)
# Encryption is then performed using modular exponentiation. In this post, we ignore the fact that RSA encryption should always be combined with a secure encryption scheme (e.g. OAEP). Normally, you don't process plaintext with RSA but instead generate a fixed size random session key.
#
# The RSA part of the encryption process boils down to:
#
# convert the message into a big integer.
# compute c ≡ m^e mod n
# And decryption ends up being the same operation with a different exponent:
#
# c^d ≡ (m^e)^d ≡ m (mod n)

# p = 19497970535589906764765621427295002043018445459943056086713403490870298425506745856507678643916767475308508339457387394127356276232819283645070002029062741
# q = 19522777289300812114803295910737999164581797480395400391273940665001088315424850264876083829310480274633915242605505486054722843889535421021671384821660409
def egcd(a, b):
    x,y, u,v = 0,1, 1,0
    while a != 0:
        q, r = b//a, b%a
        m, n = x-u*q, y-v*q
        b,a, x,y, u,v = a,r, u,v, m,n
        gcd = b
    return gcd, x, y

def main():
    e = 165528674684553774754161107952508373110624366523537426971950721796143115780129435315899759675151336726943047090419484833345443949104434072639959175019000332954933802344468968633829926100061874628202284567388558408274913523076548466524630414081156553457145524778651651092522168245814433643807177041677885126141
    n = 380654536359671023755976891498668045392440824270475526144618987828344270045182740160077144588766610702530210398859909208327353118643014342338185873507801667054475298636689473117890228196755174002229463306397132008619636921625801645435089242900101841738546712222819150058222758938346094596787521134065656721069
    c = 370573771525009837244622274382319256699740850414804856549361665015779276574242391093147292737298961564169465163137667706203627167818250394060111748297417693786675842700407785408345161466246286250203893173827269170234598242466719912809697231950924506861901047356012130388958228623250532677168592306450337383680

    d = wieners_attack_d(e,n)

    txt = str(hex(pow(c, d, n)))[2:]
    message = ''.join([chr(int(''.join(c), 16)) for c in zip(txt[0::2],txt[1::2])])
    print("MSG: " + message)


if __name__ == "__main__":
    main()
